#!/usr/bin/env python
#
# Licensed by "The MIT License". See file LICENSE.
#
# Implementation of AES-128 with the option to simulate fault
# injections in round 8.
# expk are already expanded keys reconstructed from the fault analysis.
#
def encrypt(p,k=None,expk=None,fault=0x00,floc=0):
  plaintext = to_matrix(p)
  if expk == None:
    expanded_key = expandkey(k)
  else:
    expanded_key = expk
  state = add_roundkey(plaintext, get_roundkey(expanded_key,0))
  for r in range(1,10):
    if (r == 8):
      state[ floc % 4 ][ floc / 4 ] ^= fault # fault injection
    state = add_roundkey( mixcolumns(shiftrows( subbytes(state))), get_roundkey(expanded_key,r))
  # final round
  return to_bitstring( add_roundkey(shiftrows( subbytes(state)), get_roundkey(expanded_key,10)))

def decrypt(c,k):
  ciphertext = to_matrix(c)
  expanded_key = expandkey(k)
  state = inv_subbytes(invShiftRows( add_roundkey(ciphertext, get_roundkey(expanded_key,10))))
  for r in range(9,0,-1):
    roundKey = get_roundkey(expanded_key,r)
    state = inv_subbytes(invShiftRows(inv_mixcolumns( add_roundkey(state,roundKey))))
  return to_bitstring(add_roundkey(state, get_roundkey(expanded_key,0)))

def add_roundkey(state,roundKey):
  for i in range(0,4):
    for j in range(0,4):
      state[i][j] ^= roundKey[i][j]
  return state

def get_roundkey(expanded_key,r):
  key = 0
  for i in xrange(4):
    key ^= expanded_key[4*r+i] << 96-32*i
  return to_matrix(key)

def ks_core(t,r):
  b = ((t << 8) & 0xffffffff) ^ (t >> 24)
  c = rcon[r] << 24
  for i in xrange(4):
    c ^= sbox[(b >> 24 - 8*i) & 0xff] << 24 - 8*i
  return c

def expandkey(key):
  Nb = 4
  Nk = 4
  Nr = 10
  rconi = 1
  expanded_key = [(key >> 96-32*i) & 0xffffffff for i in xrange(4)]
  for i in xrange(Nk,Nb * (Nr + 1)):
    t = expanded_key[i-1]
    if (i % Nk == 0):
      t = ks_core(t,rconi)
      rconi += 1
    expanded_key.append(expanded_key[i-Nk] ^ t)
    i += 1
  return expanded_key

def subbytes(state):
  return apply_subbytes(state,False)

def inv_subbytes(state):
  return apply_subbytes(state,True)

def apply_subbytes(state,isInv):
  for i in range(0,4):
    for j in range(0,4):
      if (not isInv):
        state[i][j] = sbox[state[i][j]]
      else:
        state[i][j] = inv_sbox[state[i][j]]
  return state

def shiftrows(state):
  return apply_shiftrows(state,False)

def inv_shiftrows(state):
  return apply_shiftrows(state,True)

def apply_shiftrows(state,isInv):
  for i in range(1,4):
    for j in range(1,i+1):
      if(not isInv):
        state[i].append(state[i].pop(0)) # left-shift
      else:
        state[i].insert(0,state[i].pop()) # right-shift
  return state

def mixcolumns(state):
  return apply_mixcolumns(state,False)

def inv_mixcolumns(state):
  return apply_mixcolumns(state,True)

def apply_mixcolumns(state,isInv):
  s = [
    [0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00],
  ]
  if (not isInv):
    # matrix for mixcolumns
    m = [
      [0x02,0x03,0x01,0x01],
      [0x01,0x02,0x03,0x01],
      [0x01,0x01,0x02,0x03],
      [0x03,0x01,0x01,0x02]
    ]
  else:
    # matrx for invMixColumns
    m = [
      [0x0e,0x0b,0x0d,0x09],
      [0x09,0x0e,0x0b,0x0d],
      [0x0d,0x09,0x0e,0x0b],
      [0x0b,0x0d,0x09,0x0e]
    ]
  for i in range(0,4):
    for j in range(0,4):
      for k in range(0,4):
        s[i][j] ^= gm(state[k][j],m[i][k])
  return s

# galois multiplication
def gm(a,b):
  f = 0x11b  # AES polynomial: x^8 + x^4 + x^3 + x + 1
  g = 0
  for i in range(8):
    if (b & 1) == 1: g ^= a
    hbs = (a & 0x80) # check if highest bit is set
    a <<= 1
    if hbs == 0x80: a ^= f
    b >>= 1
  return g

#Rijndael S-box
sbox = [
0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]

# Rijndael Inverted S-box
inv_sbox = [
0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]

# Rijndael Rcon
rcon = [
0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
0x36, 0x6c, 0xd8, 0xab, 0x4D, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb ]

def to_matrix(s):
  m = []
  for i in xrange(4):
    m.append([(s >> (120-8*(4*j+i))) & 0xff for j in xrange(4)])
  return m

def to_bitstring(s):
  m = 0
  for i in xrange(len(s)):
    for j in xrange(len(s[i])):
      m ^= s[i][j] << (120-8*(4*j+i))
  return m

def printmatrix(m):
  for i in xrange(4):
    for j in xrange(4):
      print "{:02x} ".format(m[i][j]),
    print ""
  print ""

def printkeys(keys):
  for i in xrange(len(keys)):
    print "{:08x}".format(keys[i])
  print ""

def test_aes():

 # KEY, PLAINTEXT, CIPHERTEXT
  L = [(0x00000000000000000000000000000000,0x80000000000000000000000000000000,0x3ad78e726c1ec02b7ebfe92b23d9ec34),
       (0x00000000000000000000000000000000,0xc0000000000000000000000000000000,0xaae5939c8efdf2f04e60b9fe7117b2c2),
       (0x00000000000000000000000000000000,0xe0000000000000000000000000000000,0xf031d4d74f5dcbf39daaf8ca3af6e527),
       (0x00000000000000000000000000000000,0xf0000000000000000000000000000000,0x96d9fd5cc4f07441727df0f33e401a36),
       (0x00000000000000000000000000000000,0xf8000000000000000000000000000000,0x30ccdb044646d7e1f3ccea3dca08b8c0),
       (0x00000000000000000000000000000000,0xff800000000000000000000000000000,0xa81738252621dd180a34f3455b4baa2f),
       (0x00000000000000000000000000000000,0xffffffffffffffffffffe00000000000,0x9ca547f7439edc3e255c0f4d49aa8990),
       (0x2b7e151628aed2a6abf7158809cf4f3c,0x6bc1bee22e409f96e93d7e117393172a,0x3ad77bb40d7a3660a89ecaf32466ef97),
       (0x2b7e151628aed2a6abf7158809cf4f3c,0xae2d8a571e03ac9c9eb76fac45af8e51,0xf5d3d58503b9699de785895a96fdbaaf),
       (0x2b7e151628aed2a6abf7158809cf4f3c,0x30c81c46a35ce411e5fbc1191a0a52ef,0x43b1cd7f598ece23881b00e3ed030688),
       (0x2b7e151628aed2a6abf7158809cf4f3c,0xf69f2445df4f9b17ad2b417be66c3710,0x7b0c785e27e8ad3f8223207104725dd4)]

  for e in L:
    assert e[2] == encrypt(e[1],e[0])

  print "All tests passed."

if __name__ == '__main__':
  test_aes()
